

module Script
  @@init_scripts = [
                    {:name => :streamer,
                      :dst =>  "/doremi/etc/init.d/streamer.init",
                      :src => "./projects/mpegstreamer/src/misc/init/streamer.init"},
                    {:drmsubtitled => "/doremi/etc/init.d/drmsubtitled.init"}
                   ]

  def self.init_scripts
    @@init_scripts
  end

  def self.[](name)
    @@init_scripts.detect{|map| map[:name] == name.to_sym}
  end
end

module Target
  @@targets = [{:le100 => 'root@172.17.20.74'}]

  def self.[](name)
    r = @@targets.detect{|map| map[name.to_sym]}
    return r[name.to_sym] if r
    r
  end
end

module App
  include Rake::DSL

  @@compile_hosts = {}
  @@apps = {}

  def self.my_system(line)
    puts "Executing: #{line}"
    system line 
  end

  def self.extended(other)
    @@apps[other.to_s.downcase] = other
  end

  def compile_host(name)
    @@compile_hosts[self.to_s.downcase] = name
  end

  def method_missing(name, arg)
    if arg.is_a? Hash
      # puts "%" * 100
      self.class_eval <<-RUBY
      @@#{name} = {}
      def self.#{name}
        @@#{name}
      end
      RUBY
      map = self.send(name)
      arg.each {|k, v|
        map[k] = v
      }
    else
      self.class_eval <<-RUBY
      @@#{name} = '#{arg}'
      def self.#{name}
        @@#{name}
      end
      RUBY
    end
  end
  
  def name
    "#{app.to_s.split('::').last.downcase}"
  end

  def self.create_tasks

    @@apps.each do |k, app|
      extend Rake::DSL
      taskname = "#{app.to_s.split('::').last.downcase}"
      desc "Application: #{taskname}"
      task "#{app.to_s.split('::').last.downcase}" => ["#{taskname}:compile"] do       
      end

      namespace taskname do
        desc "compile #{taskname}"
        task :compile  do
          puts "===> Compiling #{taskname}"
          my_system "ssh #{@@compile_hosts[taskname]} 'cd ~/#{app.src_path} && make'"
        end

        desc "deploy #{taskname}"
        task :deploy => [:compile] do
          puts "===> Deploying #{taskname}"
          app.scripts.each {|s|
            my_system "ssh #{Target[app.target]} '#{Script[s][:dst]} stop'"
            my_system "scp #{Script[s][:src]} #{Target[app.target]}:#{Script[s][:dst]}"
          }
          my_system "scp #{app.bin[:src]} #{Target[app.target]}:#{app.bin[:dst]}"
        end

        desc "run #{taskname}"
        task :run => [:deploy] do
          puts "===> Running #{taskname}"
          app.scripts.each {|s|
            my_system "ssh #{Target[app.target]} '#{Script[s][:dst]} start'"
          }
        end
      end
    end
  end 
end

module MPEGStreamer
  extend App

  compile_host  :gemini
  target        :le100
  scripts       [:streamer]

  src_path './projects/mpegstreamer/src/apps/MPEG_Streamer/'

  bin({:src => src_path + 'MPEG_Streamer.out',
        :dst => '/doremi/bin/'})
end

module Drmsubtitled
  extend App

  compile_host  :indi
  target        :screen4
  scripts       [:drmsubtitled]

  src_path './projects/dcp2000/src/apps/drmsubtitled/'

  bin({:src => src_path + 'drmsubtitled.out',
        :dst => '/doremi/bin/'})
end

module DcpStream
  extend App

  compile_host  :gemini
  target        :le100
  scripts       [:streamer]

  src_path './projects/mpegstreamer/src/apps/dcpstream/'

  bin({:src => src_path + 'dcpstream.out',
        :dst => '/doremi/bin/'})
end

module DcpSrvd
  extend App

  compile_host  :gemini
  target        :le100
  scripts       [:streamer]

  src_path './projects/mpegstreamer/src/apps/dcpsrvd/'

  bin({:src => src_path + 'dcpsrvd.out',
        :dst => '/doremi/bin/'})
end

# Task creation
App.create_tasks

task :default => [:help]

task :help do
  puts "Following applications are recognized:"
  Rake.application.tasks.each {|s| puts "#{s}"}
  puts "$" * 80
end
