
(add-to-list 'load-path "~/.emacs.d/color-theme-6.6.0")
(load "~/.emacs.d/color-theme-gruber-darker.el" nil t t)

(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "#181818" :foreground "#e4e4ef" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 98 :width normal :foundry "unknown" :family "DejaVu Sans Mono")))))

(iswitchb-mode 1)

;; Column and line display
(line-number-mode t)
(column-number-mode t)

;; Highlights the corresponding parenthesis
(require 'paren)
(show-paren-mode)

;; Use y or n insted of yes or no
(fset 'yes-or-no-p 'y-or-n-p)

(color-theme-gruber-darker)
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(font-use-system-font t)
 '(inhibit-startup-screen t)
 '(show-paren-mode t))

;; Removes menu, scroll bar and tool bar
(scroll-bar-mode)
(menu-bar-mode)
(tool-bar-mode)

;; Removes the trainling spaces before save
;;(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; Auto refreahes buffer
(global-auto-revert-mode t)

;; Treating .h as cpp headers
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;  YASNIPPET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-to-list 'load-path  "~/.emacs.d/yasnippet")
(require 'yasnippet)
(yas/initialize)
(yas/load-directory "~/.emacs.d/yasnippet/snippets")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;  AUTOCOMPLETE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-to-list 'load-path "~/.emacs.d/auto-complete")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/auto-complete/ac-dict")
(ac-config-default)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;  GLOBAL SHORTCUTS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(global-set-key (kbd "C-c c") 'comment-region)
(global-set-key (kbd "C-c v") 'uncomment-region)
(global-set-key (kbd "C-c t") 'yas/insert-snippet)
(global-set-key (kbd "C-c C-g") 'goto-line)

;;;;;;;;;;;;;;;;;;;;;;;;
;;;   AUCTEX MODE    ;;;
;;;;;;;;;;;;;;;;;;;;;;;;
(load "auctex.el" nil t t)
(load "preview-latex.el" nil t t)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;          CEDET            ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; See cedet/common/cedet.info for configuration details.
(load-file "~/.emacs.d/cedet-1.0.1/common/cedet.el")
;; Enable EDE (Project Management) features
(global-ede-mode 1)
(require 'eassist)
(require 'semantic-ia)
(require 'semantic-gcc)
(defun my-semantic-hook ()
  (imenu-add-to-menubar "TAGS")
  (global-semantic-tag-folding-mode 1)
)
(add-hook 'semantic-init-hooks 'my-semantic-hook)

;; Enable EDE for a pre-existing C++ project
;; (ede-cpp-root-project "NAME" :file "~/myproject/Makefile")
;; Enabling Semantic (code-parsing, smart completion) features
;; * This enables the database and idle reparse engines
;; (semantic-load-enable-minimum-features)
;; * This enables some tools useful for coding, such as summary mode
;;   imenu support, and the semantic navigator
;; (semantic-load-enable-code-helpers)
;; * This enables even more coding tools such as intellisense mode
;;   decoration mode, and stickyfunc mode (plus regular code helpers)
 (semantic-load-enable-gaudy-code-helpers)
;; * This enables the use of Exuberent ctags if you have it installed.
;;   If you use C++ templates or boost, you should NOT enable it.
;; (semantic-load-enable-all-exuberent-ctags-support)
;;   Or, use one of these two types of support.
;;   Add support for new languges only via ctags.
;; (semantic-load-enable-primary-exuberent-ctags-support)
;;   Add support for using ctags as a backup parser.
;; (semantic-load-enable-secondary-exuberent-ctags-support)

;; Graphic mode CEDET hook
(if window-system
(defun my-cedet-hook ()
  (local-set-key [(control return)] 'semantic-ia-complete-symbol)
  ;; (local-set-key "." 'semantic-complete-self-insert)
  ;; (local-set-key ">" 'semantic-complete-self-insert)
  (local-set-key "\C-cl" 'semantic-ia-complete-symbol-menu))
(defun my-cedet-hook ()
  (local-set-key [(control return)] 'semantic-ia-complete-symbol)
  ;; (local-set-key "." 'semantic-complete-self-insert)
  ;; (local-set-key ">" 'semantic-complete-self-insert)
  )
)

;; C-mode specific keyboard shortcuts
(defun my-c-mode-common-hook-3 ()
  (define-key c-mode-base-map (kbd "C-c s") 'eassist-switch-h-cpp)	; Header cpp switch
  (define-key c-mode-base-map (kbd "C-c *") 'semantic-tag-folding-show-all)
  (define-key c-mode-base-map (kbd "C-c /") 'semantic-tag-folding-fold-all)
  (define-key c-mode-base-map (kbd "C-c =") 'semantic-tag-folding-show-block)
  (define-key c-mode-base-map (kbd "C-c -") 'semantic-tag-folding-fold-block)
  (define-key c-mode-base-map (kbd "C-c m") 'eassist-list-methods)
 )
(add-hook 'c-mode-common-hook 'my-c-mode-common-hook-3)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;;;       RUBY                ;;;
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; ;; Rsense setup
;; ;; (setq rsense-home "/usr/lib/rsense-0.3")
;; ;; (add-to-list 'load-path (concat rsense-home "/etc"))
;; ;; (require 'rsense)

;; ;; Hide Show package activation and config for ruby
;; (add-hook 'ruby-mode-hook
;;           (lambda ()
;;             (add-to-list 'ac-sources 'ac-source-rsense-method)
;;             (add-to-list 'ac-sources 'ac-source-rsense-constant)
;; 	    (hs-minor-mode)
;; 	    (global-set-key (kbd "C-c =") 'hs-show-block)
;; 	    (global-set-key (kbd "C-c -") 'hs-hide-block))
;; )

;; (setq c5-ruby-block-starters (list "module" "class" "def" "do" "if "
;; "unless" "{"))
;; (setq c5-ruby-block-enders (list "end" "}"))
;; (aput 'hs-special-modes-alist 'ruby-mode
;;      (list (mapconcat #'identity c5-ruby-block-starters "\\|") ;builds regex matching start of blocks
;;            (mapconcat #'identity c5-ruby-block-enders "\\|") ;builds regex matching end of blocks
;;            "#" ; match comments
;;            (lambda (arg) (ruby-end-of-block arg)) nil))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;;;      Multimode Config     ;;;
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (add-to-list 'load-path "~/.emacs.d/mmm-mode-0.4.8")
;; (require 'mmm-auto)
;; (setq mmm-global-mode 'maybe)
;; (setq mmm-submode-decoration-level '2)
;; (set-face-background 'mmm-code-submode-face "#111100")
;; (set-face-background 'mmm-init-submode-face "#223355")
;; (set-face-background 'mmm-declaration-submode-face "#333333")
;; (set-face-background 'mmm-comment-submode-face "#003322")

;; (mmm-add-group
;;  'fancy-cpp
;;  '(
;;    (eruby
;;     :submode ruby-mode
;;     :face  mmm-init-submode-face
;;     :front "<%[=]?"
;;     :back  "%>")
;;    (objing
;;     :submode cc-mode
;;     :face mmm-declaration-submode-face
;;     :front "//START OF MODIFIABLE ZONE@.*?@.*"
;;     :back "//END OF .*?")
;;    (adcpp
;;     :submode cc-mode
;;     :face mmm-declaration-submode-face
;;     :front "[ ]?// START OF .*? MODIFIABLE ZONE"
;;     :back "// END OF .*? MODIFIABLE ZONE")
;;    )
;;  )
;; (mmm-add-mode-ext-class 'c++-mode "\\.h\\'" 'fancy-cpp)
;; (mmm-add-mode-ext-class 'c++-mode "\\.hpp\\'" 'fancy-cpp)
;; (mmm-add-mode-ext-class 'c++-mode "\\.cpp\\'" 'fancy-cpp)
;; (mmm-add-mode-ext-class 'c++-mode "\\.c\\'" 'fancy-cpp)

;; (setq auto-mode-alist
;;       (append '(("\\.rb$" . ruby-mode)
;; 		("\\.rhtml$" . ruby-mode)
;; 		("\\.gem$" . ruby-mode)
;; 		("\\.gemspec$" . ruby-mode)
;; 		("[Rr]akefile" . ruby-mode))
;; 	      auto-mode-alist))
